[Main]
Title=BranchGeneral
Author=joveler
Description=UnitTest
Version=001
Level=5
Selected=True
Mandatory=False

[Variables]
InlineMacro=Set,#r,#1

[Process-Run]
Set,%Dest%,F
Run,%ScriptFile%,SetTrue

[Process-Run-InParam]
Set,%Dest%,F
Run,%ScriptFile%,SetParam,T

[Process-RunEx-OutParam]
Set,%Dest%,F
RunEx,%ScriptFile%,SetOutParam,In=T,Out=%Dest%

[Process-RunEx-OutParam-Error]
Set,%Dest%,F
RunEx,%ScriptFile%,SetOutParam,In=T

[Process-Exec]
Set,%Dest%,F
Set,%ExecVar%,F
Exec,%ScriptDir%\Exec.script,SetTrue
Set,%Dest%,#r

[Process-Exec-MacroBak]
// Test if Exec command successfully preserves local macro dictionary.
// https://github.com/pebakery/pebakery/commit/268843927156b94f5d1c9c35c8a3359f06b94ff9
AddVariables,%ScriptFile%,Variables
Set,%Dest%,F
Set,%ExecVar%,F
Exec,%ScriptDir%\Exec.script,SetTrue
InlineMacro,T
Set,%Dest%,#r

[SetTrue]
Set,%Dest%,T

[SetParam]
Set,%Dest%,#1

[SetOutParam]
Set,#o1,#1

[Process-Loop01]
Set,%Dest%,NIL
Loop,%ScriptFile%,LoopTest,1,3,Z

[Process-Loop02]
Set,%Dest%,""
Loop,%ScriptFile%,LoopBreak,1,4,Z,3

[Process-LoopEx-OutParam]
Set,%Dest%,NIL
LoopEx,%ScriptFile%,LoopOutParam,1,3,In=Z,Out=%Dest%

[Process-LoopEx-OutParam-Error]
Set,%Dest%,""
LoopEx,%ScriptFile%,LoopOutParam,1,3,In=Z

[Process-LoopCompat01]
Set,%Dest%,NIL
Loop,%ScriptFile%,LoopTest,C,E,Z

[Process-LoopCompat02]
Set,%Dest%,""
Loop,%ScriptFile%,LoopBreak,C,F,Z,E

[Process-LoopLetter01]
Set,%Dest%,NIL
LoopLetter,%ScriptFile%,LoopTest,C,E,Z

[Process-LoopLetter02]
Set,%Dest%,""
LoopLetter,%ScriptFile%,LoopBreak,C,F,Z,E

[Process-LoopLetterEx-OutParam]
Set,%Dest%,NIL
LoopLetterEx,%ScriptFile%,LoopOutParam,C,E,In=Z,Out=%Dest%

[Process-LoopLetterEx-OutParam-Error]
Set,%Dest%,""
LoopLetterEx,%ScriptFile%,LoopOutParam,C,E,In=Z

[Process-LoopNest]
Set,%Dest%,NIL
Loop,%ScriptFile%,LoopNestFirst,1,3

[LoopTest]
List,Append,%Dest%,#c
List,Append,%Dest%,#1

[LoopOutParam]
List,Append,#o1,#c
List,Append,#o1,#1

[LoopBreak]
List,Append,%Dest%,#c
List,Append,%Dest%,#1
If,#c,Equal,#2,Loop,BREAK

[LoopNestFirst]
List,Append,%Dest%,#c
Loop,%ScriptFile%,LoopNestSecond,4,5
List,Append,%Dest%,#c

[LoopNestSecond]
List,Append,%Dest%,#c

[Process-IfElse01]
Set,%Dest%,F
Set,#r,False
If,#r,Equal,True,Begin
  Set,%Dest%,F
End
Else,Begin
  Set,%Dest%,T
End

[Process-IfElse02]
Set,%Dest%,F
Set,#r,""
If,#r,Equal,True,Begin
  Set,%Dest%,F
End
Else,Begin
  Set,%Dest%,F
End
Set,%Dest%,T

[Process-IfElseChain01]
Set,%Dest%,F
Set,#r,5
If,#r,Equal,1,Set,%Dest%,F
Else,If,#r,Equal,2,Set,%Dest%,F
Else,If,#r,Equal,3,Set,%Dest%,F
// Comment must not crash CodeParser by resetting the elseFlag.
Else,If,#r,Equal,4,Set,%Dest%,F
Else,If,#r,Equal,5,Set,%Dest%,T

[Process-IfElseChain02]
Set,%Dest%,F
Set,#r,5
If,#r,Equal,1,Begin
  Set,%Dest%,F
End
Else,If,#r,Equal,2,Begin
  Set,%Dest%,F
End
Else,If,#r,Equal,3,Begin
  Set,%Dest%,F
End
// Comment must not crash CodeParser by resetting the elseFlag.
Else,If,#r,Equal,4,Begin
  Set,%Dest%,F
End
Else,If,#r,Equal,5,Begin
  Set,%Dest%,T
End

[Process-IfElseChain03]
Set,%Dest%,F
Set,#r,3
If,#r,Equal,1,Begin
  Set,%Dest%,F
End
Else,If,#r,Equal,2,Begin
  // If-Else chain with Comments
  Set,%Dest%,F
  // If-Else chain with Comments
End
Else,If,#r,Equal,3,Begin
  Set,%Dest%,T
End

[Process-NestedElseFlag-Error]
Set,%Dest%,T
Set,#r,2
If,#r,Equal,1,Begin
  Set,%Dest%,T
End
Else,Else,If,#r,Equal,2,Begin
  Set,%Dest%,F
End

[Process-IfBeginEnd]
Set,%Dest%,F
Set,#r,True
If,#r,Equal,True,Begin
    Set,%Dest%,T
End

[Process-While-Simple]
Set,%i%,0
Set,#r,""
While,%i%,Smaller,3,Begin
  Math,Add,%i%,%i%,1
  Set,#r,"#rA"
 End

[Process-While-If]
Set,%A%,True
Set,%i%,0
Set,#r,""
If,%A%,Equal,True,While,%i%,Smaller,3,Begin
  Math,Add,%i%,%i%,1
  Set,#r,"#rA"
 End
 
 [Process-While-Nested]
Set,#r,""
Set,%A%,True
Set,%xIdx%,0
While,%xIdx%,Smaller,2,Begin
  Set,%yIdx%,0
  While,%yIdx%,Smaller,3,If,%A%,Equal,True,Begin
    Math,Add,%yIdx%,%yIdx%,1
    Set,#r,"#rA"
  End
  Math,Add,%xIdx%,%xIdx%,1
End

[Process-While-Break01]
Set,#r,""
Set,%A%,True
Set,%xIdx%,0
While,%xIdx%,Smaller,2,Begin
  Set,%yIdx%,0
  While,%yIdx%,Smaller,3,Begin
    Math,Add,%yIdx%,%yIdx%,1
    Set,#r,"#rA"
	If,%yIdx%,Equal,2,Break
  End
  Math,Add,%xIdx%,%xIdx%,1
End

[Process-While-Break02]
Set,#r,""
Set,%A%,True
Set,%xIdx%,0
While,%xIdx%,Smaller,2,Begin
  Set,%yIdx%,0
  While,%yIdx%,Smaller,3,Begin
    Math,Add,%yIdx%,%yIdx%,1
    Set,#r,"#rA"
  End
  Math,Add,%xIdx%,%xIdx%,1
  If,%xIdx%,Equal,1,Break
End

[Process-While-Continue01]
Set,#r,""
Set,%A%,True
Set,%xIdx%,0
While,%xIdx%,Smaller,2,Begin
  Set,%yIdx%,0
  While,%yIdx%,Smaller,3,Begin
    Math,Add,%yIdx%,%yIdx%,1
	If,%yIdx%,Bigger,2,Continue
	Set,#r,"#rA"
  End
  Math,Add,%xIdx%,%xIdx%,1
End

[Process-While-Continue02]
Set,#r,""
Set,%A%,True
Set,%xIdx%,0
While,%xIdx%,Smaller,2,Begin
  Math,Add,%xIdx%,%xIdx%,1
  If,%xIdx%,BiggerEqual,2,Continue
  Set,%yIdx%,0
  While,%yIdx%,Smaller,3,Begin
    Math,Add,%yIdx%,%yIdx%,1
    Set,#r,"#rA"
  End
End

[Process-ForEach-IntList]
Set,#r,0
Set,%IterateList%,"1|2|4|3|7"
ForEach,%Element%,%IterateList%,Begin
  Math,Add,#r,#r,%Element%
End

[Process-ForEach-StrList]
Set,#r,""
Set,%A%,Apple
ForEach,%Element%,"Tomato|%A%|Orange",Begin
  Set,#r,"#r%Element%"
End

[Process-ForEach-IdxList]
Set,#r,""
Set,%SrcList%,"A|B|C"
Set,%idxList%,"1?3?2"
ForEach,%idx%,%idxList%,"Delim=?",Begin
  List,Get,%SrcList%,%idx%,%Element%
  Set,#r,"#r%Element%"
End

[Process-ForRange-Increment01]
Set,#r,0
ForRange,%i%,0,5,1,Begin
  Set,#r,"#r%i%"
End

[Process-ForRange-Increment02]
Set,#r,0
ForRange,%i%,0,7,2,Begin
  Set,#r,"#r%i%"
End

[Process-ForRange-Decrement01]
Set,#r,0
ForRange,%i%,5,0,-1,Begin
  Set,#r,"#r%i%"
End

[Process-ForRange-Decrement02]
Set,#r,0
ForRange,%i%,7,0,-2,Begin
  Set,#r,"#r%i%"
End