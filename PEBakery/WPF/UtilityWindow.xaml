<!--
    Copyright (C) 2016-2023 Hajin Jang
    Licensed under GPL 3.0
 
    PEBakery is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    Additional permission under GNU GPL version 3 section 7

    If you modify this program, or any covered work, by linking
    or combining it with external libraries, containing parts
    covered by the terms of various license, the licensors of
    this program grant you additional permission to convey the
    resulting work. An external library is a library which is
    not derived from or based on this program. 
-->

<!-- ReSharper disable Xaml.BindingWithContextNotResolved -->
<Window x:Class="PEBakery.WPF.UtilityWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PEBakery.WPF"
        xmlns:cc="clr-namespace:PEBakery.WPF.Controls"
        xmlns:ccc="clr-namespace:PEBakery.Core.WpfControls;assembly=PEBakery.Core"
        mc:Ignorable="d"
        Title="PEBakery Utilities"
        FontFamily="Segoe UI"
        FontSize="13"
        Loaded="Window_Loaded"
        Closed="Window_Closed"
        Width="800" Height="640"
        MinWidth="600" MinHeight="480"
        Icon="/Resources/Donut.ico"
        WindowStartupLocation="CenterOwner"
        d:DataContext="{d:DesignInstance Type=local:UtilityViewModel}">
    <Window.CommandBindings>
        <!-- CodeBox -->
        <CommandBinding x:Name="CodeBoxSaveCommand"
                        Command="local:UtilityViewCommands.CodeBoxSaveCommand"
                        CanExecute="CodeBoxCommands_CanExecute"
                        Executed="CodeBoxSaveCommand_Executed"/>
        <CommandBinding x:Name="CodeBoxRunCommand"
                        Command="local:UtilityViewCommands.CodeBoxRunCommand"
                        CanExecute="CodeBoxCommands_CanExecute"
                        Executed="CodeBoxRunCommand_Executed"/>
        <!-- String Escaper -->
        <CommandBinding x:Name="EscapeStringCommand"
                        Command="local:UtilityViewCommands.EscapeStringCommand"
                        CanExecute="StringEscaperCommands_CanExecute"
                        Executed="EscapeStringCommand_Executed"/>
        <CommandBinding x:Name="UnescapeStringCommand"
                        Command="local:UtilityViewCommands.UnescapeStringCommand"
                        CanExecute="StringEscaperCommands_CanExecute"
                        Executed="UnescapeStringCommand_Executed"/>
        <CommandBinding x:Name="EscapeSequenceLegendCommand"
                        Command="local:UtilityViewCommands.EscapeSequenceLegendCommand"
                        CanExecute="StringEscaperCommands_CanExecute"
                        Executed="EscapeSequenceLegendCommand_Executed"/>
        <!-- Syntax Checker -->
        <CommandBinding x:Name="SyntaxCheckCommand"
                        Command="local:UtilityViewCommands.SyntaxCheckCommand"
                        CanExecute="SyntaxCheckCommand_CanExecute"
                        Executed="SyntaxCheckCommand_Executed"/>
    </Window.CommandBindings>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="60"/>
        </Grid.RowDefinitions>
        <TabControl Grid.Row="0"
                    SelectedIndex="{Binding TabIndex}">
            <TabItem Header="CodeBox" Width="120">
                <Grid Margin="10, 10, 10, 10">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="22"/>
                        <RowDefinition Height="25"/>
                        <RowDefinition Height="10"/>
                        <RowDefinition Height="22"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <TextBlock Grid.Row="0"
                               VerticalAlignment="Center"
                               FontWeight="Bold"
                               Text="Project Environment"/>
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="100"/>
                            <ColumnDefinition Width="100"/>
                        </Grid.ColumnDefinitions>

                        <ComboBox Grid.Column="0"
                                  SelectedIndex="{Binding SelectedProjectIndex}"
                                  ItemsSource="{Binding Projects}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Item1}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <Button Grid.Column="1"
                                x:Name="CodeBoxSaveButton"
                                Margin="10, 0, 0, 0"
                                Content="Save"
                                AutomationProperties.Name="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"
                                ToolTip="Ctrl + S"
                                Command="local:UtilityViewCommands.CodeBoxSaveCommand"/>
                        <Button Grid.Column="2"
                                x:Name="CodeBoxRunButton"
                                Margin="10, 0, 0, 0"
                                Content="Run"
                                AutomationProperties.Name="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"
                                ToolTip="Ctrl + R"
                                Command="local:UtilityViewCommands.CodeBoxRunCommand"/>
                    </Grid>

                    <TextBlock Grid.Row="3"
                               VerticalAlignment="Center"
                               FontWeight="Bold"
                               Text="Script Code"/>
                    <TextBox Grid.Row="4"
                             x:Name="CodeBoxInputTextBox"
                             AutomationProperties.Name="CodeBoxInputTextBox"
                             FontFamily="{Binding MonoFontFamily}"
                             FontWeight="{Binding MonoFontWeight}"
                             FontSize="{Binding MonoFontSize}"
                             TextWrapping="Wrap"
                             AcceptsReturn="True"
                             VerticalContentAlignment="Stretch"
                             ScrollViewer.HorizontalScrollBarVisibility="Auto"
                             ScrollViewer.VerticalScrollBarVisibility="Auto"
                             ScrollViewer.CanContentScroll="True"
                             Text="{Binding CodeBoxInput}"/>
                </Grid>
            </TabItem>
            <TabItem Header="String Escaper" Width="120">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition></RowDefinition>
                        <RowDefinition Height="50"></RowDefinition>
                        <RowDefinition></RowDefinition>
                    </Grid.RowDefinitions>

                    <Grid Grid.Row="0" Margin="10, 10, 10, 10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="22"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0"
                                   VerticalAlignment="Center"
                                   FontWeight="Bold"
                                   Text="Source String"/>
                        <TextBox Grid.Row="1"
                                 AutomationProperties.Name="StringToConvertTextBox"
                                 FontFamily="{Binding MonoFontFamily}"
                                 FontWeight="{Binding MonoFontWeight}"
                                 FontSize="{Binding MonoFontSize}"
                                 TextWrapping="Wrap"
                                 AcceptsReturn="True"
                                 VerticalContentAlignment="Stretch"
                                 ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                 ScrollViewer.VerticalScrollBarVisibility="Auto"
                                 ScrollViewer.CanContentScroll="True"
                                 Text="{Binding EscaperStringToConvert}"/>
                    </Grid>

                    <Grid Grid.Row="1" Margin="10, 10, 10, 10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="110"/>
                            <ColumnDefinition Width="110"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="200"/>
                        </Grid.ColumnDefinitions>

                        <Button Grid.Column="0"
                                Margin="0, 0, 10, 0"
                                x:Name="EscapeButton"
                                Content="Escape"
                                AutomationProperties.Name="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"
                                ToolTip="Ctrl + E"
                                Command="local:UtilityViewCommands.EscapeStringCommand"/>
                        <Button Grid.Column="1"
                                Margin="0, 0, 10, 0"
                                x:Name="UnescapeButton"
                                Content="Unescape"
                                AutomationProperties.Name="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"
                                ToolTip="Ctrl + Shift + E"
                                Command="local:UtilityViewCommands.UnescapeStringCommand"/>
                        <StackPanel Grid.Column="2"
                                    Margin="0, 0, 10, 0"
                                    Orientation="Horizontal">
                            <CheckBox Margin="0, 0, 10, 0"
                                      VerticalAlignment="Center"
                                      Content="Escape %"
                                      IsChecked="{Binding EscaperEscapePercentFlag}"/>
                        </StackPanel>
                        <Button Grid.Column="3"
                                x:Name="PrintLegendButton"
                                Content="Escape Sequence Legend"
                                Command="local:UtilityViewCommands.EscapeSequenceLegendCommand"/>
                    </Grid>

                    <Grid Grid.Row="2" Margin="10, 10, 10, 10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="22"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0"
                                   VerticalAlignment="Center"
                                   FontWeight="Bold"
                                   Text="Result">
                        </TextBlock>
                        <TextBox Grid.Row="1"
                                 x:Name="ConvertedStringTextBox"
                                 AutomationProperties.Name="ConvertedStringTextBox"
                                 ccc:SelectTextOnFocus.Active="True"
                                 FontFamily="{Binding MonoFontFamily}"
                                 FontWeight="{Binding MonoFontWeight}"
                                 FontSize="{Binding MonoFontSize}"
                                 TextWrapping="Wrap"
                                 AcceptsReturn="True"
                                 VerticalContentAlignment="Stretch"
                                 ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                 ScrollViewer.VerticalScrollBarVisibility="Auto"
                                 ScrollViewer.CanContentScroll="True"
                                 IsReadOnly="True"
                                 Text="{Binding EscaperConvertedString}">
                        </TextBox>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="Syntax Checker" Width="120">
                <Grid Margin="10, 10, 10, 10">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="22"/>
                        <RowDefinition Height="25"/>
                        <RowDefinition Height="2*"/>
                        <RowDefinition Height="1*"/>
                    </Grid.RowDefinitions>

                    <TextBlock Grid.Row="0"
                               VerticalAlignment="Center"
                               FontWeight="Bold"
                               Text="Project Environment"/>
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="120"/>
                        </Grid.ColumnDefinitions>

                        <ComboBox Grid.Column="0"
                                  SelectedIndex="{Binding SelectedProjectIndex}"
                                  ItemsSource="{Binding Projects}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Item1}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        
                        <Button Grid.Column="1"
                                Margin="10, 0, 0, 0"
                                x:Name="SyntaxCheckButton"
                                Content="Syntax Check"
                                AutomationProperties.Name="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"
                                Command="local:UtilityViewCommands.SyntaxCheckCommand"/>
                    </Grid>

                    <Grid Grid.Row="2" Margin="0, 10, 0, 0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="22"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0"
                                   VerticalAlignment="Center"
                                   FontWeight="Bold"
                                   Text="Script Code"/>
                        <TextBox Grid.Row="1"
                                 AutomationProperties.Name="SyntaxCheckInputTextBox"
                                 FontFamily="{Binding MonoFontFamily}"
                                 FontWeight="{Binding MonoFontWeight}"
                                 FontSize="{Binding MonoFontSize}"
                                 TextWrapping="Wrap"
                                 AcceptsReturn="True"
                                 VerticalContentAlignment="Stretch"
                                 ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                 ScrollViewer.VerticalScrollBarVisibility="Auto"
                                 ScrollViewer.CanContentScroll="True"
                                 Text="{Binding SyntaxInputCode}"/>
                    </Grid>

                    <Grid Grid.Row="3" Margin="0, 10, 0, 0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="22"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0"
                                   VerticalAlignment="Center"
                                   FontWeight="Bold"
                                   Text="Result"/>
                        <TextBox Grid.Row="1"
                                 x:Name="SyntaxCheckResultTextBox"
                                 ccc:SelectTextOnFocus.Active="True"
                                 AutomationProperties.Name="SyntaxCheckResultTextBox"
                                 FontFamily="{Binding MonoFontFamily}"
                                 FontWeight="{Binding MonoFontWeight}"
                                 FontSize="{Binding MonoFontSize}"
                                 TextWrapping="Wrap"
                                 AcceptsReturn="True"
                                 VerticalContentAlignment="Stretch"
                                 ScrollViewer.HorizontalScrollBarVisibility="Auto"
                                 ScrollViewer.VerticalScrollBarVisibility="Auto"
                                 ScrollViewer.CanContentScroll="True"
                                 IsReadOnly="True"
                                 Text="{Binding SyntaxCheckResult}"/>
                    </Grid>
                </Grid>
            </TabItem>
        </TabControl>
        <Grid Grid.Row="1" Margin="15, 15, 15, 15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="100"/>
            </Grid.ColumnDefinitions>

            <Button Grid.Row="0" Grid.Column="1"
                    IsCancel="True"
                    Content="Close"
                    Click="CloseButton_Click"/>
        </Grid>
    </Grid>
</Window>
